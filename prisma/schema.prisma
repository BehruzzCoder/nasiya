generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int      @id @default(autoincrement())
  email    String
  password String
  name     String
  IsActive Boolean? @default(false)
}

model Seller {
  id               Int              @id @default(autoincrement())
  fullName         String
  phoneNumber      String
  email            String
  img              String
  debterCount      Int
  wallet           Int?             @default(0)
  password         String
  isActive         Boolean          @default(false)
  Debter           Debter[]
  Namuna           Namuna[]
  Notification     Notification[]
  PaymentHistories PaymentHistory[]
  Sample           Sample[]
}

model Debter {
  id               Int              @id @default(autoincrement())
  name             String
  address          String
  debtSum          Int
  note             String
  sellerId         Int
  Debt             Debt[]
  seller           Seller           @relation(fields: [sellerId], references: [id])
  ImgOfDebter      ImgOfDebter[]
  Notification     Notification[]
  PaymentHistories PaymentHistory[]
  PhoneOfDebter    PhoneOfDebter[]
}

model Debt {
  id               Int                @id @default(autoincrement())
  productName      String
  date             String
  description      String
  debterId         Int
  duration         Int                @default(1)
  amount           Int
  monthly_amount   Int
  debter           Debter             @relation(fields: [debterId], references: [id])
  ImgOfDebt        ImgOfDebt[]
  PaymentHistories PaymentHistory[]
  PaymentSchedules PaymentSchedules[]
}

model ImgOfDebter {
  id       Int    @id @default(autoincrement())
  name     String
  debterId Int
  debter   Debter @relation(fields: [debterId], references: [id])
}

model ImgOfDebt {
  id     Int    @id @default(autoincrement())
  name   String
  debtId Int
  debt   Debt   @relation(fields: [debtId], references: [id])
}

model PhoneOfDebter {
  id       Int    @id @default(autoincrement())
  number   String
  debterId Int
  debter   Debter @relation(fields: [debterId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  text      String
  isSended  Boolean
  sellerId  Int
  debterId  Int
  namunaId Int?
  createdAt DateTime @default(now())
  debter    Debter   @relation(fields: [debterId], references: [id])
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Sample {
  id       Int     @id @default(autoincrement())
  text     String
  isActive Boolean
  sellerId Int
  seller   Seller  @relation(fields: [sellerId], references: [id])
}

model PaymentSchedules {
  id               Int                    @id @default(autoincrement())
  debt_id          Int
  date             DateTime               @unique
  expected_amount  Int
  updatedAt        DateTime               @updatedAt
  status           PaymentSchedulesStatus @default(PENDING)
  PaymentHistories PaymentHistory[]
  debt             Debt                   @relation(fields: [debt_id], references: [id])
}

model Namuna {
  id       Int     @id @default(autoincrement())
  isActive Boolean @default(true)
  text     String
  sellerId Int
  seller   Seller  @relation(fields: [sellerId], references: [id])
}

model PaymentHistory {
  id         Int               @id @default(autoincrement())
  amount     Int
  paidAt     DateTime          @default(now())
  method     String
  note       String?
  debterId   Int
  sellerId   Int
  debtId     Int
  scheduleId Int?
  debt       Debt              @relation(fields: [debtId], references: [id])
  debter     Debter            @relation(fields: [debterId], references: [id])
  schedule   PaymentSchedules? @relation(fields: [scheduleId], references: [id])
  seller     Seller            @relation(fields: [sellerId], references: [id])
}

enum PaymentSchedulesStatus {
  PENDING
  PAID
  OVERDUE
}
